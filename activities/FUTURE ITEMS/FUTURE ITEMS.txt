In each GitHub repo folder, include a bunch of practice problems:
 - Debugging problems (unfuck this code)
 - Scaffolded problems (modify this code to make it do another thing)
"The only way to get better is to practice a lot, fall flat on your face, and practice some more. Each year I add more practice problems to the library. I suggest completing these problems each week; feel free to ask others in the class for help, but *try* them first, put it away, come back fresh, etc."

Slides on Common Mistakes and formative MCQ (the sort of things to include in debugging exercises)

Add chain rule to calculus slides
Anti-derivative practice slides (you've got an extra 25 minutes on that day)


Intro Day slide on Grading Scheme
A: Did the work and did it well.
A-: Did the work and fell flat on your face a bunch.
B+ and below: Gave up and stopped doing the work.
In grad school, Feedback >>> Grades! You're trying to learn a skill, and I won't penalize you for failing. Because failing and adjusting is how we learn.

What distinguishes high performers from average performers is *deliberate practice*:
1. Structured activities designed to identify and improve weaknesses
2. Rapid feedback

When introducing probability, maybe dice? binom.test for confidence interval.
Two key concepts: the **statistic** and the **sampling distribution**. How weird would it be to get a statistic of this size if...?
What's the range of hypotheses such that this *wouldn't* be weird? That's a 95% confidence interval. 
