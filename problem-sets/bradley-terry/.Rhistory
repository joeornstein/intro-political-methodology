library(tidyverse)
log(0)
1:n
1:10
diff(1:10, 4)
diff(1:10)
diff((1:10))
diff((1:10),1)
diff((1:10),2)
diff((1:10),3)
setdiff(1:10,4)
update_scores <- function(p, W){
new_p <- p
# For each i, update according to equation
for(i in 1:length(p)){
# Compute numerator
numerator <- sum(W[i,])
# Compute denominator
denominator <- 0
for(j in setdiff(1:length(p), i)){
denominator <- denominator +
(w[i,j] + w[j,i]) / (p[i] + p[j])
}
new_p[i] <- numerator / denominator
}
# Renormalize
new_p <- new_p / sum(new_p)
return(new_p)
}
get_log_likelihood <- function(p, W){
# Start at zero and add up
ll <- 0
# For
for(i in 1:length(p)){
for(j in 1:length(p)){
ll <- ll + W[i,j] * log(p[i]) - W[i,j] * log(p[i] + p[j])
}
}
return(ll)
}
n <- 10
p <- rep(1/n,n)
n <- 10
p <- rep(1/n,n)
W <- matrix(data = round(runif(n*n, 0, 10)),
nrow = n,
ncol = n)
diag(W) <- 0
View(W)
W[1,1]
W[1,2]
W[1,6]
W %*% W
get_log_likelihood(p, W)
update_scores(p, W)
update_scores <- function(p, W){
new_p <- p
# For each i, update according to equation
for(i in 1:length(p)){
# Compute numerator
numerator <- sum(W[i,])
# Compute denominator
denominator <- 0
for(j in setdiff(1:length(p), i)){
denominator <- denominator +
(W[i,j] + W[j,i]) / (p[i] + p[j])
}
new_p[i] <- numerator / denominator
}
# Renormalize
new_p <- new_p / sum(new_p)
return(new_p)
}
update_scores(p, W)
rowSums(W)
ll_sequence <- rep(0,num_iterations)
num_iterations <- 100
ll_sequence <- rep(0,num_iterations)
get_log_likelihood(p, W)
update_scores(p, W)
num_iterations <- 100
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
p
plot(ll_sequence)
plot(ll_sequence, type = 'l')
rowSums(W)
p
w[1,2]
W[1,2]
nrow(W)
n <- nrow(W)
bradley_terry <- function(W, num_iterations = 100){
n <- nrow(W)
# select a starting p
p <- rep(1/n, n)
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
plot(ll_sequence, xlab = 'Iteration', ylab = 'Log Likelihood')
return(p)
}
p <- bradley_terry(W)
bradley_terry <- function(W, num_iterations = 100){
n <- nrow(W)
# select a starting p
p <- rep(1/n, n)
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
plot(ll_sequence, type = 'l',
xlab = 'Iteration', ylab = 'Log Likelihood')
return(p)
}
p <- bradley_terry(W)
p
n <- 3
W <- matrix(c(0,4,2,
1,0,5,
0,1,1))
p <- bradley_terry(W)
W <- matrix(c(0,4,2,
1,0,5,
0,1,1),
nrow = n,
ncol = n)
p <- bradley_terry(W)
p
n <- 3
W <- matrix(c(0,4,2,
1,0,5,
1,1,0),
nrow = n,
ncol = n)
p <- bradley_terry(W)
p
sum(W[i,])
sum(W[1,])
sum(W[2,])
sum(W[3,])
W
?matrix
n <- 3
W <- matrix(c(0,4,2,
1,0,5,
1,1,0),
nrow = n,
ncol = n)
W
p <- bradley_terry(W)
p
log2(8280000)
2^23
library(tidyverse)
get_log_likelihood <- function(p, W){
# Start at zero and add up
ll <- 0
# For
for(i in 1:length(p)){
for(j in 1:length(p)){
ll <- ll + W[i,j] * log(p[i]) - W[i,j] * log(p[i] + p[j])
}
}
return(ll)
}
update_scores <- function(p, W){
new_p <- p
# For each i, update according to equation
for(i in 1:length(p)){
# Compute numerator
numerator <- sum(W[i,])
# Compute denominator
denominator <- 0
for(j in setdiff(1:length(p), i)){
denominator <- denominator +
(W[i,j] + W[j,i]) / (p[i] + p[j])
}
new_p[i] <- numerator / denominator
}
# Renormalize
new_p <- new_p / sum(new_p)
return(new_p)
}
n <- 10
p <- rep(1/n,n)
W <- matrix(data = round(runif(n*n, 0, 10)),
nrow = n,
ncol = n)
diag(W) <- 0
get_log_likelihood(p, W)
update_scores(p, W)
num_iterations <- 100
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
W
p
plot(ll_sequence, type = 'l')
rowSums(W)
bradley_terry <- function(W, num_iterations = 100){
n <- nrow(W)
# select a starting p
p <- rep(1/n, n)
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
plot(ll_sequence, type = 'l',
xlab = 'Iteration', ylab = 'Log Likelihood')
return(p)
}
## Try it out! ----
p <- bradley_terry(W)
p
n <- 3
W <- matrix(c(0,4,2,
1,0,5,
1,1,0),
nrow = n,
ncol = n)
W
p <- bradley_terry(W)
p
library(tidyverse)
get_log_likelihood <- function(p, W){
# Start at zero and add up
ll <- 0
# For
for(i in 1:length(p)){
for(j in 1:length(p)){
ll <- ll + W[i,j] * log(p[i]) - W[i,j] * log(p[i] + p[j])
}
}
return(ll)
}
update_scores <- function(p, W){
new_p <- p
# For each i, update according to equation
for(i in 1:length(p)){
# Compute numerator
numerator <- sum(W[i,])
# Compute denominator
denominator <- 0
for(j in setdiff(1:length(p), i)){
denominator <- denominator +
(W[i,j] + W[j,i]) / (p[i] + p[j])
}
new_p[i] <- numerator / denominator
}
# Renormalize
new_p <- new_p / sum(new_p)
return(new_p)
}
n <- 10
p <- rep(1/n,n)
W <- matrix(data = round(runif(n*n, 0, 10)),
nrow = n,
ncol = n)
diag(W) <- 0
get_log_likelihood(p, W)
update_scores(p, W)
num_iterations <- 100
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
W
p
plot(ll_sequence, type = 'l')
bradley_terry <- function(W, num_iterations = 100){
n <- nrow(W)
# select a starting p
p <- rep(1/n, n)
ll_sequence <- rep(0,num_iterations)
for(i in 1:num_iterations){
p <- update_scores(p, W)
ll_sequence[i] <- get_log_likelihood(p, W)
}
plot(ll_sequence, type = 'l',
xlab = 'Iteration', ylab = 'Log Likelihood')
return(p)
}
## Try it out! ----
p <- bradley_terry(W)
p
n <- 3
W <- matrix(c(0,4,2,
1,0,5,
1,1,0),
nrow = n,
ncol = n)
W
p <- bradley_terry(W)
p
p[1]/(p[1]+p[2])
p[2]/(p[1]+p[2])
4/5
5/6
p[3]/(p[2]+p[3])
p[1]/(p[1]+p[3])
W[1,3]/(W[1,3]+W[3,1])
get_log_likelihood(p,W)
p_prime <- p
p_prime[1]
p_prime[1] <- p_prime1 - 0.01
p_prime[1] <- p_prime[1] - 0.01
p_prime[2] <- p_prime[2] + 0.005
p_prime[3] <- p_prime[3] + 0.005
sum(p)
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
# Is this a good fit? Compare to log-likelihood of p'
p_prime <- p
p_prime[1] <- p_prime[1] - 0.01
p_prime[2] <- p_prime[2] + 0
p_prime[3] <- p_prime[3] + 0.01
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
# Is this a good fit? Compare to log-likelihood of p'
p_prime <- p
p_prime[1] <- p_prime[1] - 0.001
p_prime[2] <- p_prime[2] + 0
p_prime[3] <- p_prime[3] + 0.001
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
# Is this a good fit? Compare to log-likelihood of p'
p_prime <- p
p_prime[1] <- p_prime[1] + 0.001
p_prime[2] <- p_prime[2] + 0
p_prime[3] <- p_prime[3] - 0.001
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
# Is this a good fit? Compare to log-likelihood of p'
p_prime <- p
p_prime[1] <- p_prime[1] + 0.00
p_prime[2] <- p_prime[2] + 0.001
p_prime[3] <- p_prime[3] - 0.001
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
# Is this a good fit? Compare to log-likelihood of p'
p_prime <- p
p_prime[1] <- p_prime[1] + 0.00
p_prime[2] <- p_prime[2] - 0.001
p_prime[3] <- p_prime[3] + 0.001
sum(p_prime)
get_log_likelihood(p,W)
get_log_likelihood(p_prime, W)
