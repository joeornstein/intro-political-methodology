---
title: "Week 10: Data Wrangling"
author: Joe Ornstein

echo: true
message: false
warning: false
---

*Move some of the class notes to the front here.*

# Reading

-   **R4DS** Chapters 3-4

-   **R4DS** Chapter 12

# Problem Set

This week, we're going to be summarizing different variables from the CES 2020 dataset. You'll need to use the codebook to identify which variables contain the information you want, tidy them up, and then summarize. Write an `R` script that performs these tasks, compile a PDF report, and submit the report.

Here are the questions I'd like you to answer:

1.  Are labor union members more likely to be Democrats or Republicans?

2.  What is the median age of people with landline phones, compared to those who only have cell phones?

3.  Are people who read the newspaper more likely to correctly answer the questions about who controls the US House of Representatives and US Senate?

4.  Which religious groups are the most and least likely to support making abortion illegal in all circumstances?

5.  **Bonus**. The CES oversamples some respondents relative to their frequency among registered voters in order to get a better statistical picture of some smaller subgroups. The dataset contains a *weight* variable for each respondent, reflecting how much that type of respondent is overrepresented in the sample compared to the population. Compare the mean age of the sample with the *weighted mean* age of the sample. What do you notice? Do the same thing for the unweighted and weighted shares of each racial group. Redo the analyses in questions 1-4 using weighted means. What conclusions, if any, change?

# Class Notes

Up to now, we've been working with pretty tidy datasets. Every column is a variable, every row is an observation, and every value is where it should be. But things are not always this way. More often than you're going to like, data comes to you an unruly mess, and you'll need to tidy it up before you can even start to explore it.

This week, we'll learn some of the most important functions in the `tidyverse` for data wrangling.

[![](img/data_wrangler.png)](https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome)

In your last problem set, you worked with a tidied up version of the Cooperative Election Study (CES) from 2020. Let's look at the steps I took to import and clean up that dataset.

### Importing The Data

The CES is a survey of a representative sample of 50,000+ American adults, conducted every election year by a large consortium of universities. The data going back to 2006 is available [here](https://cces.gov.harvard.edu/). Go to that site and download the 2020 dataset, a 180 megabyte monster called `CES20_Common_OUTPUT_vv.csv`.

The `.csv` extension at the end of the file means that it is a "comma separated value" file. This is a file where all of the values are separated by commas. Looks something like this:

```         
name, age, party
'Joe', 35, 'Bull Moose'
'Fiona', 6, 'Birthday'
'Avery', 3, 'Know Nothing'
```

It's a nice standardized way to represent datasets, and fortunately for us, the `read_csv()` function allows us to read such files into `R`. Let's create an object called `ces_raw` from that raw dataset.

```{r}
library(tidyverse)

ces_raw <- read_csv('data/raw/CES20_Common_OUTPUT_vv.csv')
```

This dataset has a lot of information.

```{r}
dim(ces_raw)
```

61,000 rows and 717 columns, to be precise. The first few rows and columns look like this:

```{r}
head(ces_raw)
```

### Recoding Variables

Now that we have the dataset loaded into memory, let's find the variables we're interested in keeping and clean them up a bit. For example, gender is coded as a 1 or 2.

```{r}
ces_raw |> 
  count(gender)
```

Let's make this more readable. The codebook (available at the same site where you downloaded the data) says that 1 is male and 2 is female. We can create a new version of the gender column using the `mutate()` and `if_else()` functions.

```{r}
ces_clean <- ces_raw |> 
  mutate(gender = if_else(gender == 1, 'Male', 'Female'))

ces_clean |> 
  count(gender)
```

What about the education variable (`educ`)?

```{r}
ces_clean |> 
  count(educ)
```

That's a lot of categories to clean up. We can combine the `mutate()` function with `case_when()` to recode a bunch of different values at the same time.

```{r}
ces_clean <- ces_clean |> 
  mutate(educ = case_when(educ == 1 ~ 'No HS',
                          educ == 2 ~ 'High school graduate',
                          educ == 3 ~ 'Some college',
                          educ == 4 ~ '2-year',
                          educ == 5 ~ '4-year',
                          educ == 6 ~ 'Post-grad'))
ces_clean |> 
  count(educ)
```

Now the variable has the correct labels, but notice that the order in that table is kind of weird. We tend to think of education as an **ordinal** variable, because there's a natural order from least to most educated. But `R` doesn't know that yet. It just thinks of `educ` as a character variable, and lists them in alphabetical order. We can tell `R` about the variable order by recoding `educ` as a **factor**.

```{r}
ces_clean <- ces_clean |> 
  mutate(educ = factor(educ,
                       levels = c('No HS', 
                                  'High school graduate',
                                  'Some college',
                                  '2-year',
                                  '4-year',
                                  'Post-grad')))
ces_clean |> 
  count(educ)
```

Much better!

There's a variable in CES called `birthyr`. What if we wanted to know the respondents age in 2020 instead? The `mutate()` function can help us here too.

```{r}
ces_clean |> 
  count(birthyr)

ces_clean <- ces_clean |> 
  mutate(age = 2020 - birthyr)

ces_clean |> 
  count(birthyr, age)
```

### Joining Datasets

Here's another messy feature of this dataset. Every respondent has a variable called `inputstate`, representing the state where they live.

```{r}
ces_clean |> 
  count(inputstate)
```

But it's a number! Not, like, the actual name of the state, which would be more useful to me. I don't know all 51 state [FIPS codes](https://www.nrcs.usda.gov/wps/portal/nrcs/detail/?cid=nrcs143_013696) by heart, but fortunately I have a dataset that includes every state's name and FIPS code.

```{r}
state_fips <- tidycensus::fips_codes |> 
  mutate(inputstate = as.numeric(state_code)) |> 
  select(inputstate, state_name) |> 
  unique()

head(state_fips)
```

And I can **join** that information with the CES data like this.

```{r}
ces_clean <- ces_clean |> 
  left_join(state_fips, by = 'inputstate')

ces_clean |> 
  count(inputstate, state_name)
```

More on joining datasets in two weeks.

### Selecting Variables

Finally, we can use the `select()` function to keep only the columns we want, and drop the columns we don't want.

```{r}
ces_clean <- ces_clean |> 
  select(caseid, gender, educ, age, state_name)

head(ces_clean)
```

And you can save your cleaned up version of the data to an .RData file with the `save()` function.

```{r, eval=FALSE}
save(ces_clean, file = 'data/ces-clean.RData')
```

# Additional Resources

-   [Wrangling Penguins](https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome), by Allison Horst
